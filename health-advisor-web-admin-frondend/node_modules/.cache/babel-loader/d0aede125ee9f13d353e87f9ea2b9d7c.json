{"ast":null,"code":"var _jsxFileName = \"G:\\\\health-advisor-web-admin-frontend\\\\health-advisor-web-admin-frondend\\\\src\\\\layouts\\\\features\\\\MultiSelectBox\\\\index.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport style from './MultiSelectBox.module.css';\nimport arrow_icon from '../../../assets/images/arrow_icon.png';\n\nconst MultiSelectBox = ({\n  items,\n  inputRef,\n  setValue,\n  name\n}) => {\n  const wrapperRef = useRef(null);\n  const [showItems, setShowItems] = useState(false);\n  const [selectedItems, setSelectedItems] = useState([]);\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, false);\n    return () => {\n      document.removeEventListener('click', handleClickOutside, false);\n    };\n  }, []);\n\n  const handleClickOutside = event => {\n    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\n      setShowItems(false);\n    }\n  };\n\n  const onSelect = item => {\n    if (item !== items[0]) {\n      if (selectedItems.includes(item.value)) {\n        setSelectedItems(selectedItems => selectedItems.filter(each => each !== item.value));\n        setValue(name, selectedItems.filter(each => each !== item.value), {\n          shouldValidate: true\n        });\n      } else {\n        setSelectedItems(selectedItems => [...selectedItems, item.value]);\n        setValue(name, [...selectedItems, item.value], {\n          shouldValidate: true\n        });\n      }\n    }\n  };\n\n  const handleKeyPress = e => {\n    if (e.keyCode === 13) {\n      setShowItems(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: style.box,\n    ref: wrapperRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.container,\n    tabIndex: \"0\",\n    onClick: () => setShowItems(showItems => !showItems),\n    onKeyDown: handleKeyPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: style.selected_item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, selectedItems.length === 0 ? /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'var(--letter-blue)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, items[0].label) : selectedItems.join(', ')), /*#__PURE__*/React.createElement(\"div\", {\n    className: style.arrow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: showItems ? style.arrow_up : style.arrow_down,\n    src: arrow_icon,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: showItems ? 'block' : 'none'\n    },\n    className: style.item_container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, items && items.map(item => /*#__PURE__*/React.createElement(\"div\", {\n    key: item.id,\n    className: selectedItems.includes(item.value) ? style.active_item + ' ' + style.item : style.item,\n    onClick: () => onSelect(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, item === items[0] ? '' : /*#__PURE__*/React.createElement(\"span\", {\n    className: style.checkbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: selectedItems.includes(item.value) ? style.checkbox_ticked + ' ' + style.checkmark : style.checkmark,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  })), item.label))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: name,\n    ref: inputRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }));\n};\n\nMultiSelectBox.propTypes = {\n  items: PropTypes.array.isRequired,\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })]),\n  setValue: PropTypes.func.isRequired\n};\nexport default MultiSelectBox;","map":{"version":3,"sources":["G:/health-advisor-web-admin-frontend/health-advisor-web-admin-frondend/src/layouts/features/MultiSelectBox/index.js"],"names":["React","useState","useRef","useEffect","PropTypes","style","arrow_icon","MultiSelectBox","items","inputRef","setValue","name","wrapperRef","showItems","setShowItems","selectedItems","setSelectedItems","document","addEventListener","handleClickOutside","removeEventListener","event","current","contains","target","onSelect","item","includes","value","filter","each","shouldValidate","handleKeyPress","e","keyCode","box","container","selected_item","length","color","label","join","arrow","arrow_up","arrow_down","display","item_container","map","id","active_item","checkbox","checkbox_ticked","checkmark","propTypes","array","isRequired","oneOfType","func","shape","any"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport style from './MultiSelectBox.module.css';\r\n\r\nimport arrow_icon from '../../../assets/images/arrow_icon.png';\r\n\r\nconst MultiSelectBox = ({ items, inputRef, setValue, name }) => {\r\n  const wrapperRef = useRef(null);\r\n  const [showItems, setShowItems] = useState(false);\r\n  const [selectedItems, setSelectedItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('click', handleClickOutside, false);\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside, false);\r\n    };\r\n  }, []);\r\n\r\n  const handleClickOutside = (event) => {\r\n    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\r\n      setShowItems(false);\r\n    }\r\n  };\r\n\r\n  const onSelect = (item) => {\r\n    if (item !== items[0]) {\r\n      if (selectedItems.includes(item.value)) {\r\n        setSelectedItems((selectedItems) =>\r\n          selectedItems.filter((each) => each !== item.value)\r\n        );\r\n        setValue(\r\n          name,\r\n          selectedItems.filter((each) => each !== item.value),\r\n          {\r\n            shouldValidate: true,\r\n          }\r\n        );\r\n      } else {\r\n        setSelectedItems((selectedItems) => [...selectedItems, item.value]);\r\n        setValue(name, [...selectedItems, item.value], {\r\n          shouldValidate: true,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.keyCode === 13) {\r\n      setShowItems(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={style.box} ref={wrapperRef}>\r\n      <div\r\n        className={style.container}\r\n        tabIndex='0'\r\n        onClick={() => setShowItems((showItems) => !showItems)}\r\n        onKeyDown={handleKeyPress}\r\n      >\r\n        <div className={style.selected_item}>\r\n          {selectedItems.length === 0 ? (\r\n            <span style={{ color: 'var(--letter-blue)' }}>\r\n              {items[0].label}\r\n            </span>\r\n          ) : (\r\n            selectedItems.join(', ')\r\n          )}\r\n        </div>\r\n        <div className={style.arrow}>\r\n          <img\r\n            className={showItems ? style.arrow_up : style.arrow_down}\r\n            src={arrow_icon}\r\n            alt=''\r\n          />\r\n        </div>\r\n      </div>\r\n      <div\r\n        style={{ display: showItems ? 'block' : 'none' }}\r\n        className={style.item_container}\r\n      >\r\n        {items &&\r\n          items.map((item) => (\r\n            <div\r\n              key={item.id}\r\n              className={\r\n                selectedItems.includes(item.value)\r\n                  ? style.active_item + ' ' + style.item\r\n                  : style.item\r\n              }\r\n              onClick={() => onSelect(item)}\r\n            >\r\n              {item === items[0] ? (\r\n                ''\r\n              ) : (\r\n                <span className={style.checkbox}>\r\n                  <div\r\n                    className={\r\n                      selectedItems.includes(item.value)\r\n                        ? style.checkbox_ticked + ' ' + style.checkmark\r\n                        : style.checkmark\r\n                    }\r\n                  ></div>\r\n                </span>\r\n              )}\r\n\r\n              {item.label}\r\n            </div>\r\n          ))}\r\n      </div>\r\n\r\n      <input type='hidden' name={name} ref={inputRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nMultiSelectBox.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n  inputRef: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.shape({ current: PropTypes.any }),\r\n  ]),\r\n  setValue: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default MultiSelectBox;\r\n"]},"metadata":{},"sourceType":"module"}